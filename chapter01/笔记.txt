名称空间：
  使用 iostream，而不是iostream.h,则应该使用下面的名称空间编译指令来使iostream中的定义对程序可用：  
  using编译指令： using namespace std；
  名称空间支持是C++的一项特性，在编写大型程序时，组合代码更加容易，易于组织程序。如：对两个不同厂的同名函数的区分。
  如：   Microflop::wanda("go dancing？")；      //  use Microflop namespace version
        Piscine::wanda("a fish named Desire")  //   use Piscine namespace version
     如上方式，类、函数和变量便是C++编译器的标准组件，都被放置在名称空间std中。
  so，在没有使用iostream时使用cout s的实际输出方式是：
                  std::cout  <<  "come up and c++ me some time";
                  std::cout  << std::endl;
                  
  针对这两种表述方式的转换问题，使用using编译指令应运而生。
  using namespace std；时，可以使用名称空间中定义的名称，而不使用std：： 前缀。
  同时也可这样表述: using std::cout;
                  using std::endl;
                  using std::cin;       便可以直接使用cin cout endl 而不必加std：： 前缀。
            
使用cout进行c++输出：
   消息显示：  cout<< "come up and c++ me some time";
              << :此符号表示该语句把这个字符串发送给cout；该符号指出了信息流动的路径；
              cout：一个预定义的对象，知道如何显示字符串、数字和单个字符等；
              cout对象有一个接口，其对象属性包含了一个插入运算符（<<),如果string 是一个字符串，则后续代码将显示字符串
                  cout<<string;
              其中我们可以看出 插入运算符<<是C中移位运算符的重载。
控制符 endl：       
  cout << endl;
  endl 是一个特殊的C++符号，表示：重起一行；

换行符 \n ：
  与endl 有同样的效果；一般，在使用字符串时使用\n，其他情况使用endl。一个差别是，endl确保程序继续运行前刷新输出（将其立即
  显示在屏幕上），而使用\n不能得到这样的保证。 
  换行符是一种“转义序列”的按键组合；
  
c++源代码的格式化：
    回车和空格制表符(Tab)可以相互转换；其中，c++中；表示一行的结束。即，可以把一条语句放在几行上，也可以把几条语句放在一行上。
    虽然输入格式上限制小，但还是要遵循一些规则： c、c++ 中不能把空格、制表符和回车放在元素中间，也不能把回车放在字符中间。
    int ma in()
    re
    trun 0;
    cout << "hello ,
    word ";   这是一个错误的示范，不被允许.然而在c++11新增的原始(raw)字符串可以包含回车。
    
    源代码中的标记和空白
    c++源代码风格：
      *每条语句占一行；
      *每个函数都有一个开始i花括号和一个结束花括号，这两个花括号个占一行；
      *函数的语句都相对于花括号进行缩进；
      *与函数名称相关的圆括号周围没有空白；    -- 帮助区分函数 和 一些也使用圆括号的 c++ 内置结构；
  
  c++语句： -- carrots.cpp
      声明语句创建变量，赋值语句给该变量提供一个值； 
      声明语句和变量：
          int carrots；  //信息： 需要的内存以及该内存单元的名称；
          对于声明变量，c++的做法使尽可能在首次使用变量前声明它。  参考 c99 for(int i =0;;);
      赋值语句：
          赋值语句将值赋给存储单元；
          carrts = 25； 
          连续使用赋值运算符： a = b = c = 1;
      cout 的新花样: 
          cout << carrots ; // 存储的是整型打印的是字符串。 比printf好用多了
      其他c++ 语句：
          使用cin：
            cin >> carrtos;  -- 从键盘输入的值赋给 carrtos 可以搭配 cin.get（） 使用
          使用cout进行拼接:
            cout << "Now you have "<< carrots << " carrots." << endl;
      类简介：       --类是c++中面向对象编程（OOP)的核心概念之一；
            类定义描述的是数据格式及其用法，而对象则是根据数据格式规范创建的实体；
            注意：类描述了一种数据类型的全部属性（包括可使用它执行的操作），对象是根据这些描述创建的实体；
            类描述指定了可对类对象执行的所有操作。要对特定的对象执行这些操作，需要给对象发送一条消息；
            c++提供了两种发送消息的方式:使用类方法；重新定义运算符，cin 、cout采用的就是这种方式；
      函数： c++ 函数分为两种：有返回值的和无返回值的；
            c++程序应当为程序中使用的每个函数提供原型；
            函数变体：   在某些语言中，有返回值的函数被称为函数（function）；
                                     没有返回值的函数被成为过程或子程序；
            用户定义的函数：函数格式、函数头、函数体
                main()函数的返回值返回给了操作系统；
                main不是关键字；
            在多函数程序中使用using编译指令：
                将using namespace std；放在函数定义之前，让文件中所有的函数都能够使用名称空间std中所有的元素
                将using namespace std；放在特定的函数定义之前，让函数能够使用std名称空间的所有元素；
                在特定的函数中使用类似using std：：cout；这样的编译指令，而不是using namespace std；让该函数内购使用指定的元素；
                完全不使用编译指令，而在需要使用名称空间std中的元素时，使用前缀std：：；
      总结： c++的基本语句：
            声明语句：定义函数中使用的变量的名称和类型；
            赋值语句：适用赋值运算符给变量赋值；
            消息语句:将消息发送给对象，激发某种行为
            函数调用：执行函数。被调用的函数执行完毕后，程序返回到函数调用语句后面的语句；
            函数原型：声明函数的返回类型、函数接受的参数数量和类型；
            返回语句：将一个值从被调用的函数那里返回到调用函数中；
            
      类：使用户定义的数据类型规范，它详细的描述了如何表示信息以及可对数据执行的操作。
      对象：是根据类规范创建的实体，就像简单变量是根据数据类型描述创建的实体一样；
      iostrem： istream ostream  cin、cout都是智能对象，能够根据程序上下文，自动将信息从一种形式转换为另一种形式；
